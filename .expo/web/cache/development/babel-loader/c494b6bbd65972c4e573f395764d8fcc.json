{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { TIME_SET_ACTION, DISMISS_ACTION, ANDROID_DISPLAY } from \"./constants\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { toMilliseconds } from \"./utils\";\n\nvar TimePickerAndroid = function () {\n  function TimePickerAndroid() {\n    _classCallCheck(this, TimePickerAndroid);\n  }\n\n  _createClass(TimePickerAndroid, null, [{\n    key: \"open\",\n    value: function open(options) {\n      return _regeneratorRuntime.async(function open$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              toMilliseconds(options, 'value');\n              options.display = options.display || ANDROID_DISPLAY.default;\n              return _context.abrupt(\"return\", NativeModules.RNTimePickerAndroid.open(options));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"dismiss\",\n    value: function dismiss() {\n      return _regeneratorRuntime.async(function dismiss$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", NativeModules.RNTimePickerAndroid.dismiss());\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return TimePickerAndroid;\n}();\n\nTimePickerAndroid.timeSetAction = TIME_SET_ACTION;\nTimePickerAndroid.dismissedAction = DISMISS_ACTION;\nexport { TimePickerAndroid as default };","map":{"version":3,"names":["TIME_SET_ACTION","DISMISS_ACTION","ANDROID_DISPLAY","toMilliseconds","TimePickerAndroid","options","display","default","NativeModules","RNTimePickerAndroid","open","dismiss","timeSetAction","dismissedAction"],"sources":["/Users/mestrada/Documents/GitHub/ourglass/node_modules/@react-native-community/datetimepicker/src/timepicker.android.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\nimport {TIME_SET_ACTION, DISMISS_ACTION, ANDROID_DISPLAY} from './constants';\nimport {NativeModules} from 'react-native';\nimport {toMilliseconds} from './utils';\n\nimport type {TimePickerOptions, DateTimePickerResult} from './types';\n\nexport default class TimePickerAndroid {\n  /**\n   * Opens the standard Android time picker dialog.\n   *\n   * The available keys for the `options` object are:\n   *   - `value` (`Date` object) - date to show by default\n   *   * `is24Hour` (boolean) - If `true`, the picker uses the 24-hour format. If `false`,\n   *     the picker shows an AM/PM chooser. If undefined, the default for the current locale\n   *     is used.\n   *   * `minuteInterval` (enum(1 | 5 | 10 | 15 | 20 | 30)`) - set the time picker minutes' interval\n   *   * `mode` (`enum('clock', 'spinner', 'default')`) - set the time picker mode\n   *     - 'clock': Show a time picker in clock mode.\n   *     - 'spinner': Show a time picker in spinner mode.\n   *     - 'default': Show a default time picker based on Android versions.\n   *\n   * Returns a Promise which will be invoked an object containing `action`, `hour` (0-23),\n   * `minute` (0-59) if the user picked a time. If the user dismissed the dialog, the Promise will\n   * still be resolved with action being `TimePickerAndroid.dismissedAction` and all the other keys\n   * being undefined. **Always** check whether the `action` before reading the values.\n   */\n  static async open(options: TimePickerOptions): Promise<DateTimePickerResult> {\n    toMilliseconds(options, 'value');\n    options.display = options.display || ANDROID_DISPLAY.default;\n\n    return NativeModules.RNTimePickerAndroid.open(options);\n  }\n\n  static async dismiss(): Promise<boolean> {\n    return NativeModules.RNTimePickerAndroid.dismiss();\n  }\n\n  /**\n   * A time has been selected.\n   */\n  static +timeSetAction: 'timeSetAction' = TIME_SET_ACTION;\n  /**\n   * The dialog has been dismissed.\n   */\n  static +dismissedAction: 'dismissedAction' = DISMISS_ACTION;\n}\n"],"mappings":";;;AASA,SAAQA,eAAR,EAAyBC,cAAzB,EAAyCC,eAAzC;;AAEA,SAAQC,cAAR;;IAIqBC,iB;;;;;;;WAoBnB,cAAkBC,OAAlB;MAAA;QAAA;UAAA;YAAA;cACEF,cAAc,CAACE,OAAD,EAAU,OAAV,CAAd;cACAA,OAAO,CAACC,OAAR,GAAkBD,OAAO,CAACC,OAAR,IAAmBJ,eAAe,CAACK,OAArD;cAFF,iCAISC,aAAa,CAACC,mBAAd,CAAkCC,IAAlC,CAAuCL,OAAvC,CAJT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WAOA;MAAA;QAAA;UAAA;YAAA;cAAA,kCACSG,aAAa,CAACC,mBAAd,CAAkCE,OAAlC,EADT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;;;;AA3BmBP,iB,CAkCXQ,a,GAAiCZ,e;AAlCtBI,iB,CAsCXS,e,GAAqCZ,c;SAtC1BG,iB"},"metadata":{},"sourceType":"module"}