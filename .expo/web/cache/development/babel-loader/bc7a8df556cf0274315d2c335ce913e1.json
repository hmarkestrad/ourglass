{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction TickerForm(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      chosenDate = _useState2[0],\n      setChosenDate = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isEnabled = _useState4[0],\n      setIsEnabled = _useState4[1];\n\n  var toggleSwitch = function toggleSwitch() {\n    return setIsEnabled(function (previousState) {\n      return !previousState;\n    });\n  };\n\n  return _jsx(SafeAreaView, {\n    style: styles.container,\n    children: _jsxs(ScrollView, {\n      style: styles.scrollView,\n      children: [_jsx(Text, {\n        style: styles.titleText,\n        children: \"Ticker Title:\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Type your ticker title here\",\n        placeholderTextColor: \"cadetblue\",\n        keyboardType: \"numeric\",\n        focusable: true\n      }), _jsx(Text, {\n        style: styles.titleText,\n        children: \"Ticker Description:\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Type description here (230 char max)\",\n        placeholderTextColor: \"cadetblue\",\n        keyboardType: \"numeric\",\n        focusable: true\n      }), _jsx(Text, {\n        style: styles.titleText,\n        children: \"Event Date:\"\n      }), _jsx(DateTimePicker, {\n        testID: \"dateTimePicker\",\n        value: chosenDate,\n        mode: \"datetime\",\n        is24Hour: true,\n        display: \"spinner\",\n        onDateChange: setChosenDate,\n        textColor: \"cadetblue\"\n      }), _jsx(Text, {\n        style: styles.titleText,\n        children: isEnabled ? 'Display: Public' : 'Display: Private'\n      }), _jsx(Switch, {\n        trackColor: {\n          false: \"#767577\",\n          true: \"cadetblue\"\n        },\n        thumbColor: isEnabled ? \"#C5E063\" : \"#f4f3f4\",\n        ios_backgroundColor: \"#3e3e3e\",\n        onValueChange: toggleSwitch,\n        value: isEnabled,\n        style: {\n          marginTop: 10\n        }\n      }), _jsx(TouchableOpacity, {\n        style: styles.submitButton,\n        onPress: function onPress() {\n          return navigation.navigate('Dash');\n        },\n        children: _jsx(Text, {\n          style: styles.submitButtonText,\n          children: \" Create \"\n        })\n      })]\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10,\n    borderRadius: 5,\n    color: '#34403A'\n  },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    padding: 20,\n    margin: 20\n  },\n  submitButton: {\n    backgroundColor: 'cadetblue',\n    padding: 10,\n    margin: 15,\n    height: 40,\n    borderRadius: 5\n  },\n  submitButtonText: {\n    color: 'white',\n    textAlign: 'center',\n    fontWeight: 'bold'\n  },\n  titleText: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#34403A'\n  }\n});\nexport default TickerForm;","map":{"version":3,"names":["React","useState","DateTimePicker","TickerForm","navigation","Date","chosenDate","setChosenDate","isEnabled","setIsEnabled","toggleSwitch","previousState","styles","container","scrollView","titleText","input","false","true","marginTop","submitButton","navigate","submitButtonText","StyleSheet","create","height","margin","borderWidth","padding","borderRadius","color","flex","justifyContent","backgroundColor","textAlign","fontWeight","fontSize"],"sources":["/Users/mestrada/Documents/GitHub/ourglass/src/components/TickerForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Text, Switch, ScrollView, SafeAreaView,  StyleSheet, TextInput, TouchableOpacity, Button, View} from \"react-native\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\n\n// use moment.js to grab current time and then get the difference\n// use function to create ticker element\n\nfunction TickerForm({ navigation }) {\n  const [chosenDate, setChosenDate] = useState(new Date());\n\n  // const onChange = (event, selectedDate) => {\n  //   const currentDate = selectedDate;\n  //   setShow(false);\n  //   setDate(currentDate);\n  // };\n    const [isEnabled, setIsEnabled] = useState(false);\n    const toggleSwitch = () => setIsEnabled(previousState => !previousState);\n    return (\n      <SafeAreaView style={styles.container} >\n         <ScrollView style={styles.scrollView}>\n          <Text style={styles.titleText}>Ticker Title:</Text>\n          <TextInput\n          style={styles.input}\n          placeholder=\"Type your ticker title here\"\n          placeholderTextColor=\"cadetblue\"\n          keyboardType=\"numeric\"\n          focusable={true}\n          />\n          <Text style={styles.titleText}>Ticker Description:</Text>\n          <TextInput\n          style={styles.input}\n          placeholder=\"Type description here (230 char max)\"\n          placeholderTextColor=\"cadetblue\"\n          keyboardType=\"numeric\"\n          focusable={true}\n          />\n      {/* <Text>selected: {date.toLocaleString()}</Text> */}\n        <Text style={styles.titleText}>Event Date:</Text>\n        <DateTimePicker\n          testID=\"dateTimePicker\"\n          value= {chosenDate}\n          mode=\"datetime\"\n          is24Hour={true}\n          display= \"spinner\"\n          onDateChange={setChosenDate}\n          textColor=\"cadetblue\"\n        />\n        <Text style={styles.titleText}>{isEnabled ? 'Display: Public' : 'Display: Private'}</Text>\n        <Switch\n        trackColor={{ false: \"#767577\", true: \"cadetblue\" }}\n        thumbColor={isEnabled ? \"#C5E063\" : \"#f4f3f4\"}\n        ios_backgroundColor=\"#3e3e3e\"\n        onValueChange={toggleSwitch}\n        value={isEnabled}\n        style={{marginTop: 10}}\n      />\n          <TouchableOpacity\n               style = {styles.submitButton}\n               onPress = {() => navigation.navigate('Dash')}\n              >\n               <Text style = {styles.submitButtonText}> Create </Text>\n          </TouchableOpacity>\n        </ScrollView>\n      </SafeAreaView>\n    );\n}\n\nconst styles = StyleSheet.create({\n    input: {\n      height: 40,\n      margin: 12,\n      borderWidth: 1,\n      padding: 10,\n      borderRadius: 5,\n      color: '#34403A'\n    },\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n      padding: 20,\n      margin: 20,\n    },\n    submitButton: {\n      backgroundColor: 'cadetblue',\n      padding: 10,\n      margin: 15,\n      height: 40,\n      borderRadius: 5,\n   },\n   submitButtonText:{\n      color: 'white',\n      textAlign: 'center',\n      fontWeight: 'bold',\n   },\n   titleText: {\n     fontSize: 16,\n     fontWeight: 'bold',\n     color: '#34403A'\n   }\n});\n  \nexport default TickerForm"],"mappings":"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"},"metadata":{},"sourceType":"module"}